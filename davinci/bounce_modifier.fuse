--[[

 This is an extended version of the Wave Modifier
 So all credit to goes the great eyeon Team for this modifier

 Added : Delay Start Time
 Added : Reverse 
 Written by Dunn Lewis <dunn[dot]lewis[dot]work[at]gmail[dot]com>

]]--

version = "v1.00 - 10 NOV 2023"

--[[
  SQUASH ANIMATION DATA

  This animation is stretched to fit into each bounce after the first one.
  We could even make this editable in the GUI if we wanted, via a curve
  control; just like a bevel profile, or similar.
]]
-- SQUASH_CURVE_X = {0.0, 0.15, 0.3, 1.0} -- < Fraction through the bounce
-- SQUASH_CURVE_Y = {0.0, 0.35, 0.0, 0.0} -- < Squash value
function squash_curve_x(squash_width)
	return {0.0, squash_width / 2, squash_width, 1.0}
end

function squash_curve_y(squash_magnitude)
	return {0.0, squash_magnitude, 0.0, 0.0}
end




-- Linear interpolation on the above table.
-- Note no extrapolation, so 't' must be between 0.0 and 1.0.
function linterp(x, y, t)
	-- Safety guard to prevent crash if t > 1.0
	if t > 1.0 then t = 1.0 end   

	local index = 1
	while x[index] <  t
	do
		index = index + 1
	end

	if index == 1 then
		return y[index]
	else
		return ((x[index] - t)*y[index-1] + (t - x[index-1])*y[index])/(x[index] - x[index - 1])
	end
end


--[[
     Compute the height of the bounce at given frame
     
     This is not optimal if you want to draw the entire animation curve
     because, at each call, we have to search to find out which bounce
     we are in.

     It makes sense to call this to get samples from the curve at
     arbitrary frames. We're planning to write a function that will
     generate the entire curve in a single operation.
  ]]
function bounce_get_height_at_t(g, 
	                            launch_speed,
	                            -- takes precendence if not nil
	                            drop_height,    
	                            elasticity, 
	                            screen_height, 
	                            fps, 
	                            start_frame, 
	                            play_speed, 
	                            floor_height,
	                            is_from_ground, 
	                            squash_magnitude, -- 8.0 is a good value
	                            squash_width,   -- 0.3 is a good value
	                            frame_num) 
	--[[

	We consider a projectile launched vertically at speed 'c'. It will fly up
	until it stops and then come back down again and hits the ground at speed
	'c' (since there is no air resistance). It will rebound at speed 'e*c',
	where 'e' is the elasticity constant. In each bounce, the height is given
	by
	               2
	    y = -0.5 gt  + ct
	 
	The initial speed of the ith bounce is c_i = ce^i (i=0 for first bounce)

	Therefore, the animation curve for the ith bounce is given by

	    y = -0.5 gt_i^2 + c_i t_i [A]

	where t_i is the time for which t_i=0 is the time of the start of the bounce

	We can triviall work out that the duration of the ith bounce is given by

	T_i = 2c_i / g = 2ce^i / g


	Ie. the bounce durations form a gerometric progression. 

	We need to figure out which bounce we are in in order to calculate t_i
	and c_i and then we can just return a value of y using formula [A]

	]]
	local c
	if drop_height ~= nil then
		c = math.sqrt(2.0*drop_height * g) 
	else
		c = launch_speed
	end
	local e = elasticity

	local offset = nil
	if is_from_ground then
		offset = 0
	else
		offset = c/g 
	end

	-- Add half the first bounce size to 't' so that we start the animation
	-- at the highest point, rather than the floor.
	-- max() holds us at the top of the bounce until the animation starts.
	-- [If we're launching from the ground, 'offset' is zero, otherwise
	--  we set it to c/g
	-- ]
	local t = math.max((frame_num - start_frame) * play_speed / fps + offset, offset)

	-- Loop subtracting 2c_i/g from 't' until doing so would make 't' negative
	local i = 0
	local ci = c
	 -- e to the power of the bounce num; useful for 'squash'
	 -- We want this to be 1.0 on the second bound, not the first
	 -- because there is no squash on the first bounce. That's why
	 -- we initialize to 1/e.
	local ee = 1/e

	while ((t - 2*ci/g) > 0)
	do
		t = t - 2*ci/g
		ci = ci * e
		ee = ee * e
		i = i + 1

		-- Once the motion is almost completely damped, stay on the ground
		if (ci < 0.1)
		then
			return {floor_height, 0, 1}
		end
	end

	-- Height
	local y = (-0.5 * g * t*t + ci*t) / screen_height + floor_height

	-- We use interpolation to stretch the squash curve accross the
	-- bounce.
	local squash
	if i == 0 then
		-- No rebound in the first bounce.
		squash = 1.0
	else
	 	squash = 1.0 - ee * linterp(squash_curve_x(squash_width), 
	                                  squash_curve_y(squash_magnitude), 
	                                  -- Fraction through the bounce
	                                  t / (2*ci/g))
	 end

	local bounce_num 
	if frame_num < start_frame then 
		bounce_num = 0
	else
		bounce_num = i + 1
	end

	return {y, bounce_num, squash}
end

-- Generates the whole animation curve in one go.
-- - This isn't actually used, because we couldn't get generation 
--   of the curve in the fuse's NotifyChange method to work and
--   it also didn't look like it would be faster.
--
function bounce_build_animation_curve(g, 
                                      launch_speed, 
                                      elasticity,
                                      fps,
                                      play_speed)
	local c = launch_speed
	local e = elasticity
	local curve = {}


	local ci = c
	local bounce_start = 0
	local count = 0
	local frame_num

	-- 'count' is just there as an infinite loop guard
	while (ci > 0.1) and count < 10
	do
		local num_frames = math.floor(2*ci/g * fps / play_speed)
		for frame_num = 0, num_frames - 1, 1
		do
			t = frame_num *1.0 / fps * play_speed
			curve[frame_num + bounce_start] = (-0.5 * g * t*t + ci*t)
		end

		bounce_start = bounce_start + num_frames
		ci = ci * e
		count = count + 1
	end


	return curve
end



--//-- Fusion API functions.


FuRegisterClass("Bounce", CT_Modifier, {
	REGS_Name = "BounceAnimation",
	REGS_Category = "Modifiers",
	REGS_OpIconString = "Bce",
	REGS_OpDescription = "Bounce Animation Modifier",
	REGS_Company 		= "Roland Kay",
	REGS_URL 			= "",
	REG_OpNoMask = true,
	REG_NoBlendCtrls = true,
	REG_NoObjMatCtrls = true,
	REG_NoMotionBlurCtrls = true,
	REG_TimeVariant = true,
	REGID_DataType = "Number",
	REGID_InputDataType = "Number",
	REG_Version = 101,
	})


BAM_GravAcc = "GravAcc"
BAM_Elasticity = "Elasticity"
BAM_LaunchSpeed = "LaunchSpeed"
BAM_ScreenHeight = "ScreenHeight"


function Create()

	InG = self:AddInput("Gavitational Acceleration", "GravAcc", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			9.8,
		INP_MinAllowed =		0,
		INP_MaxScale =			100.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	InE = self:AddInput("Elasticity", "Elasticity", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			0.6,
		INP_MinAllowed =		0,
		INP_MaxScale =			1.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	InUseLaunchSpeed = self:AddInput("Use Launch Speed", "UseLaunchSpeed", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 0.0,
		ICD_Width = 0.75,
		INP_DoNotifyChanged = true,
				})

	InLaunchSpeed = self:AddInput("Launch Speed", "LaunchSpeed", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			10.0,
		INP_MinAllowed =		0,
		INP_MaxScale =			1000.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	InDropHeight = self:AddInput("Drop Height", "DropHeight", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			10.0,
		INP_MinAllowed =		0,
		INP_MaxScale =			1000.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	InScreenHeight= self:AddInput("Screen Height", "ScreenHeight", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			10.0,
		INP_MinAllowed =		0,
		INP_MaxScale =			1000.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	InStartFrame= self:AddInput("Start Frame", "StartFrame", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			0,
		INP_MinAllowed =		0,
		INP_MaxScale =			10000.0,
		INP_Integer = 			true,
		INP_DoNotifyChanged = false,
				})

	InPlaySpeed = self:AddInput("Play Speed", "PlaySpeed", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			1.0,
		INP_MinAllowed =		-10.0,
		INP_MaxScale =			10.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = true,
		INP_DoNotifyChanged = false,
				})

	InY = self:AddInput("Y", "Y", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			0.5,
		INP_MinAllowed =		-2.0,
		INP_MaxScale =			2.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	InLaunchFromGround = self:AddInput("Launch From Ground", "LaunchFromGround", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 0.0,
		ICD_Width = 0.75,
		INP_DoNotifyChanged = false,
				})

	InSquashMagnitude = self:AddInput("Squash Magnitude", "SquashMagnitude", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			0.35,
		INP_MinAllowed =		0.0,
		INP_MaxScale =			1.0,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	InSquashWidth = self:AddInput("Squash Width", "SquashWidth", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			0.3,
		INP_MinAllowed =		0.0,
		INP_MaxScale =			0.1,
		INP_Integer = 			false,
		INP_DoNotifyChanged = false,
				})

	--[[
	  IMPROVMENT: It would be good to publish a second output which represents
	              the 'squash factor' needed to simulate th eanimated object
	              compressing as it hits the floor. This needs to be a 
	              'chinese hat' function centred around the frame where the
	              object touches the ground with the magnitude of the hat
	              proportional to 2*c_i ; i.e. the acceleration required to
	              reverse its velocity.
	]]

	OutResult = self:AddOutput("Result", "Result", {
		LINKID_DataType = "Number",
		LINK_Main = 1
		})

	OutBounceNumber = self:AddOutput("BounceNumber", "BounceNumber", {
		LINKID_DataType = "Number",
		LINK_Main = 1
		})

	OutSquash = self:AddOutput("Squash", "Squash", {
		LINKID_DataType = "Number",
		LINK_Main = 1
		})
end


--//----------------------------------------------

function NotifyChanged(inp, param, time)
	if inp == InUseLaunchSpeed then
		local locked = (param.Value > 0.5)
		if locked then
			InLaunchSpeed:SetAttrs({ IC_Visible = true })
			InDropHeight:SetAttrs({ IC_Visible = false })
		else
			InLaunchSpeed:SetAttrs({ IC_Visible = false })
			InDropHeight:SetAttrs({ IC_Visible = true })
		end
	end
end

function Process(req) 
	local g = InG:GetValue(req).Value
	local use_launch_speed = InUseLaunchSpeed:GetValue(req).Value > 0.5
	local c = InLaunchSpeed:GetValue(req).Value
	local drop_height = InDropHeight:GetValue(req).Value
	local e = InE:GetValue(req).Value
	local screen_height = InScreenHeight:GetValue(req).Value
	local fps = self.Comp:GetPrefs("Comp.FrameFormat.Rate")
	local start_frame = InStartFrame:GetValue(req).Value
	local play_speed = InPlaySpeed:GetValue(req).Value
	local Y = InY:GetValue(req).Value -- Vertical position of animation
	local squash_magnitude = InSquashMagnitude:GetValue(req).Value
	local squash_width = InSquashWidth:GetValue(req).Value
	local is_from_ground = InLaunchFromGround:GetValue(req).Value > 0.5

	if use_launch_speed then 
		drop_height = nil
	else
		c = nil
	end

	local data = bounce_get_height_at_t(g, c, drop_height, e,
	                                    screen_height, 
	                                    fps, 
	                                    start_frame, 
	                                    play_speed, 
	                                    Y, 
	                                    is_from_ground,
	                                    squash_magnitude,
	                                    squash_width,
	                                    req.Time) 

	OutResult:Set(req, Number(data[1]))
	OutBounceNumber:Set(req, Number(data[2]))
	OutSquash:Set(req, Number(data[3]))
end
